/*
 * Copyright 2023 Stanislav Mikhailov (xavetar)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

pub enum QRRTYPE {
    A = 1,
    NS = 2,
    MD = 3,
    MF = 4,
    CNAME = 5,
    SOA = 6,
    MB = 7,
    MG = 8,
    MR = 9,
    NULL = 10,
    WKS = 11,
    PTR = 12,
    HINFO = 13,
    MINFO = 14,
    MX = 15,
    TXT = 16,
    RP = 17,
    AFSDB = 18,
    X25 = 19,
    ISDN = 20,
    RT = 21,
    NSAP = 22,
    NSAP_PTR = 23,
    SIG = 24,
    KEY = 25,
    PX = 26,
    GPOS = 27,
    AAAA = 28,
    LOC = 29,
    NXT = 30,
    EID = 31,
    NIMLOC = 32,
    SRV = 33,
    ATMA = 34,
    NAPTR = 35,
    KX = 36,
    CERT = 37,
    A6 = 38,
    DNAME = 39,
    SINK = 40,
    OPT = 41,
    APL = 42,
    DS = 43,
    SSHFP = 44,
    IPSECKEY = 45,
    RRSIG = 46,
    NSEC = 47,
    DNSKEY = 48,
    DHCID = 49,
    NSEC3 = 50,
    NSEC3PARAM = 51,
    TLSA = 52,
    SMIMEA = 53,
    HIP = 55,
    NINFO = 56,
    RKEY = 57,
    TALINK = 58,
    CDS = 59,
    CDNSKEY = 60,
    OPENPGPKEY = 61,
    CSYNC = 62,
    ZONEMD = 63,
    SVCB = 64,
    HTTPS = 65,
    SPF = 99,
    UINFO = 100,
    UID = 101,
    GID = 102,
    UNSPEC = 103,
    NID = 104,
    L32 = 105,
    L64 = 106,
    LP = 107,
    EUI48 = 108,
    EUI64 = 109,
    TKEY = 249,
    TSIG = 250,
    IXFR = 251,
    AXFR = 252,
    MAILB = 253,
    MAILA = 254,
    ANY = 255,
    URI = 256,
    CAA = 257,
    AVC = 258,
    DOA = 259,
    AMTRELAY = 260,
    TA = 32768,
    DLV = 32769,
}

impl QRRTYPE {
    pub fn name(&self) -> &'static str {
        return match self {
            QRRTYPE::A => "A",
            QRRTYPE::NS => "NS",
            QRRTYPE::MD => "MD",
            QRRTYPE::MF => "MF",
            QRRTYPE::CNAME => "CNAME",
            QRRTYPE::SOA => "SOA",
            QRRTYPE::MB => "MB",
            QRRTYPE::MG => "MG",
            QRRTYPE::MR => "MR",
            QRRTYPE::NULL => "NULL",
            QRRTYPE::WKS => "WKS",
            QRRTYPE::PTR => "PTR",
            QRRTYPE::HINFO => "HINFO",
            QRRTYPE::MINFO => "MINFO",
            QRRTYPE::MX => "MX",
            QRRTYPE::TXT => "TXT",
            QRRTYPE::RP => "RP",
            QRRTYPE::AFSDB => "AFSDB",
            QRRTYPE::X25 => "X25",
            QRRTYPE::ISDN => "ISDN",
            QRRTYPE::RT => "RT",
            QRRTYPE::NSAP => "NSAP",
            QRRTYPE::NSAP_PTR => "NSAP-PTR",
            QRRTYPE::SIG => "SIG",
            QRRTYPE::KEY => "KEY",
            QRRTYPE::PX => "PX",
            QRRTYPE::GPOS => "GPOS",
            QRRTYPE::AAAA => "AAAA",
            QRRTYPE::LOC => "LOC",
            QRRTYPE::NXT => "NXT",
            QRRTYPE::EID => "EID",
            QRRTYPE::NIMLOC => "NIMLOC",
            QRRTYPE::SRV => "SRV",
            QRRTYPE::ATMA => "ATMA",
            QRRTYPE::NAPTR => "NAPTR",
            QRRTYPE::KX => "KX",
            QRRTYPE::CERT => "CERT",
            QRRTYPE::A6 => "A6",
            QRRTYPE::DNAME => "DNAME",
            QRRTYPE::SINK => "SINK",
            QRRTYPE::OPT => "OPT",
            QRRTYPE::APL => "APL",
            QRRTYPE::DS => "DS",
            QRRTYPE::SSHFP => "SSHFP",
            QRRTYPE::IPSECKEY => "IPSECKEY",
            QRRTYPE::RRSIG => "RRSIG",
            QRRTYPE::NSEC => "NSEC",
            QRRTYPE::DNSKEY => "DNSKEY",
            QRRTYPE::DHCID => "DHCID",
            QRRTYPE::NSEC3 => "NSEC3",
            QRRTYPE::NSEC3PARAM => "NSEC3PARAM",
            QRRTYPE::TLSA => "TLSA",
            QRRTYPE::SMIMEA => "SMIMEA",
            QRRTYPE::HIP => "HIP",
            QRRTYPE::NINFO => "NINFO",
            QRRTYPE::RKEY => "RKEY",
            QRRTYPE::TALINK => "TALINK",
            QRRTYPE::CDS => "CDS",
            QRRTYPE::CDNSKEY => "CDNSKEY",
            QRRTYPE::OPENPGPKEY => "OPENPGPKEY",
            QRRTYPE::CSYNC => "CSYNC",
            QRRTYPE::ZONEMD => "ZONEMD",
            QRRTYPE::SVCB => "SVCB",
            QRRTYPE::HTTPS => "HTTPS",
            QRRTYPE::SPF => "SPF",
            QRRTYPE::UINFO => "UINFO",
            QRRTYPE::UID => "UID",
            QRRTYPE::GID => "GID",
            QRRTYPE::UNSPEC => "UNSPEC",
            QRRTYPE::NID => "NID",
            QRRTYPE::L32 => "L32",
            QRRTYPE::L64 => "L64",
            QRRTYPE::LP => "LP",
            QRRTYPE::EUI48 => "EUI48",
            QRRTYPE::EUI64 => "EUI64",
            QRRTYPE::TKEY => "TKEY",
            QRRTYPE::TSIG => "TSIG",
            QRRTYPE::IXFR => "IXFR",
            QRRTYPE::AXFR => "AXFR",
            QRRTYPE::MAILB => "MAILB",
            QRRTYPE::MAILA => "MAILA",
            QRRTYPE::ANY => "*",
            QRRTYPE::URI => "URI",
            QRRTYPE::CAA => "CAA",
            QRRTYPE::AVC => "AVC",
            QRRTYPE::DOA => "DOA",
            QRRTYPE::AMTRELAY => "AMTRELAY",
            QRRTYPE::TA => "TA",
            QRRTYPE::DLV => "DLV"
        }
    }

    pub fn code(&self) -> u16 {
        return match self {
            QRRTYPE::A => QRRTYPE::A as u16,
            QRRTYPE::NS => QRRTYPE::NS as u16,
            QRRTYPE::MD => QRRTYPE::MD as u16,
            QRRTYPE::MF => QRRTYPE::MF as u16,
            QRRTYPE::CNAME => QRRTYPE::CNAME as u16,
            QRRTYPE::SOA => QRRTYPE::SOA as u16,
            QRRTYPE::MB => QRRTYPE::MB as u16,
            QRRTYPE::MG => QRRTYPE::MG as u16,
            QRRTYPE::MR => QRRTYPE::MR as u16,
            QRRTYPE::NULL => QRRTYPE::NULL as u16,
            QRRTYPE::WKS => QRRTYPE::WKS as u16,
            QRRTYPE::PTR => QRRTYPE::PTR as u16,
            QRRTYPE::HINFO => QRRTYPE::HINFO as u16,
            QRRTYPE::MINFO => QRRTYPE::MINFO as u16,
            QRRTYPE::MX => QRRTYPE::MX as u16,
            QRRTYPE::TXT => QRRTYPE::TXT as u16,
            QRRTYPE::RP => QRRTYPE::RP as u16,
            QRRTYPE::AFSDB => QRRTYPE::AFSDB as u16,
            QRRTYPE::X25 => QRRTYPE::X25 as u16,
            QRRTYPE::ISDN => QRRTYPE::ISDN as u16,
            QRRTYPE::RT => QRRTYPE::RT as u16,
            QRRTYPE::NSAP => QRRTYPE::NSAP as u16,
            QRRTYPE::NSAP_PTR => QRRTYPE::NSAP_PTR as u16,
            QRRTYPE::SIG => QRRTYPE::SIG as u16,
            QRRTYPE::KEY => QRRTYPE::KEY as u16,
            QRRTYPE::PX => QRRTYPE::PX as u16,
            QRRTYPE::GPOS => QRRTYPE::GPOS as u16,
            QRRTYPE::AAAA => QRRTYPE::AAAA as u16,
            QRRTYPE::LOC => QRRTYPE::LOC as u16,
            QRRTYPE::NXT => QRRTYPE::NXT as u16,
            QRRTYPE::EID => QRRTYPE::EID as u16,
            QRRTYPE::NIMLOC => QRRTYPE::NIMLOC as u16,
            QRRTYPE::SRV => QRRTYPE::SRV as u16,
            QRRTYPE::ATMA => QRRTYPE::ATMA as u16,
            QRRTYPE::NAPTR => QRRTYPE::NAPTR as u16,
            QRRTYPE::KX => QRRTYPE::KX as u16,
            QRRTYPE::CERT => QRRTYPE::CERT as u16,
            QRRTYPE::A6 => QRRTYPE::A6 as u16,
            QRRTYPE::DNAME => QRRTYPE::DNAME as u16,
            QRRTYPE::SINK => QRRTYPE::SINK as u16,
            QRRTYPE::OPT => QRRTYPE::OPT as u16,
            QRRTYPE::APL => QRRTYPE::APL as u16,
            QRRTYPE::DS => QRRTYPE::DS as u16,
            QRRTYPE::SSHFP => QRRTYPE::SSHFP as u16,
            QRRTYPE::IPSECKEY => QRRTYPE::IPSECKEY as u16,
            QRRTYPE::RRSIG => QRRTYPE::RRSIG as u16,
            QRRTYPE::NSEC => QRRTYPE::NSEC as u16,
            QRRTYPE::DNSKEY => QRRTYPE::DNSKEY as u16,
            QRRTYPE::DHCID => QRRTYPE::DHCID as u16,
            QRRTYPE::NSEC3 => QRRTYPE::NSEC3 as u16,
            QRRTYPE::NSEC3PARAM => QRRTYPE::NSEC3PARAM as u16,
            QRRTYPE::TLSA => QRRTYPE::TLSA as u16,
            QRRTYPE::SMIMEA => QRRTYPE::SMIMEA as u16,
            QRRTYPE::HIP => QRRTYPE::HIP as u16,
            QRRTYPE::NINFO => QRRTYPE::NINFO as u16,
            QRRTYPE::RKEY => QRRTYPE::RKEY as u16,
            QRRTYPE::TALINK => QRRTYPE::TALINK as u16,
            QRRTYPE::CDS => QRRTYPE::CDS as u16,
            QRRTYPE::CDNSKEY => QRRTYPE::CDNSKEY as u16,
            QRRTYPE::OPENPGPKEY => QRRTYPE::OPENPGPKEY as u16,
            QRRTYPE::CSYNC => QRRTYPE::CSYNC as u16,
            QRRTYPE::ZONEMD => QRRTYPE::ZONEMD as u16,
            QRRTYPE::SVCB => QRRTYPE::SVCB as u16,
            QRRTYPE::HTTPS => QRRTYPE::HTTPS as u16,
            QRRTYPE::SPF => QRRTYPE::SPF as u16,
            QRRTYPE::UINFO => QRRTYPE::UINFO as u16,
            QRRTYPE::UID => QRRTYPE::UID as u16,
            QRRTYPE::GID => QRRTYPE::GID as u16,
            QRRTYPE::UNSPEC => QRRTYPE::UNSPEC as u16,
            QRRTYPE::NID => QRRTYPE::NID as u16,
            QRRTYPE::L32 => QRRTYPE::L32 as u16,
            QRRTYPE::L64 => QRRTYPE::L64 as u16,
            QRRTYPE::LP => QRRTYPE::LP as u16,
            QRRTYPE::EUI48 => QRRTYPE::EUI48 as u16,
            QRRTYPE::EUI64 => QRRTYPE::EUI64 as u16,
            QRRTYPE::TKEY => QRRTYPE::TKEY as u16,
            QRRTYPE::TSIG => QRRTYPE::TSIG as u16,
            QRRTYPE::IXFR => QRRTYPE::IXFR as u16,
            QRRTYPE::AXFR => QRRTYPE::AXFR as u16,
            QRRTYPE::MAILB => QRRTYPE::MAILB as u16,
            QRRTYPE::MAILA => QRRTYPE::MAILA as u16,
            QRRTYPE::ANY => QRRTYPE::ANY as u16,
            QRRTYPE::URI => QRRTYPE::URI as u16,
            QRRTYPE::CAA => QRRTYPE::CAA as u16,
            QRRTYPE::AVC => QRRTYPE::AVC as u16,
            QRRTYPE::DOA => QRRTYPE::DOA as u16,
            QRRTYPE::AMTRELAY => QRRTYPE::AMTRELAY as u16,
            QRRTYPE::TA => QRRTYPE::TA as u16,
            QRRTYPE::DLV => QRRTYPE::DLV as u16,
        }
    }

    pub fn hex(&self) -> String {
        return match self {
            QRRTYPE::A => format!("{:02x}", QRRTYPE::A.code()),
            QRRTYPE::NS => format!("{:02x}", QRRTYPE::NS.code()),
            QRRTYPE::MD => format!("{:02x}", QRRTYPE::MD.code()),
            QRRTYPE::MF => format!("{:02x}", QRRTYPE::MF.code()),
            QRRTYPE::CNAME => format!("{:02x}", QRRTYPE::CNAME.code()),
            QRRTYPE::SOA => format!("{:02x}", QRRTYPE::SOA.code()),
            QRRTYPE::MB => format!("{:02x}", QRRTYPE::MB.code()),
            QRRTYPE::MG => format!("{:02x}", QRRTYPE::MG.code()),
            QRRTYPE::MR => format!("{:02x}", QRRTYPE::MR.code()),
            QRRTYPE::NULL => format!("{:02x}", QRRTYPE::NULL.code()),
            QRRTYPE::WKS => format!("{:02x}", QRRTYPE::WKS.code()),
            QRRTYPE::PTR => format!("{:02x}", QRRTYPE::PTR.code()),
            QRRTYPE::HINFO => format!("{:02x}", QRRTYPE::HINFO.code()),
            QRRTYPE::MINFO => format!("{:02x}", QRRTYPE::MINFO.code()),
            QRRTYPE::MX => format!("{:02x}", QRRTYPE::MX.code()),
            QRRTYPE::TXT => format!("{:02x}", QRRTYPE::TXT.code()),
            QRRTYPE::RP => format!("{:02x}", QRRTYPE::RP.code()),
            QRRTYPE::AFSDB => format!("{:02x}", QRRTYPE::AFSDB.code()),
            QRRTYPE::X25 => format!("{:02x}", QRRTYPE::X25.code()),
            QRRTYPE::ISDN => format!("{:02x}", QRRTYPE::ISDN.code()),
            QRRTYPE::RT => format!("{:02x}", QRRTYPE::RT.code()),
            QRRTYPE::NSAP => format!("{:02x}", QRRTYPE::NSAP.code()),
            QRRTYPE::NSAP_PTR => format!("{:02x}", QRRTYPE::NSAP_PTR.code()),
            QRRTYPE::SIG => format!("{:02x}", QRRTYPE::SIG.code()),
            QRRTYPE::KEY => format!("{:02x}", QRRTYPE::KEY.code()),
            QRRTYPE::PX => format!("{:02x}", QRRTYPE::PX.code()),
            QRRTYPE::GPOS => format!("{:02x}", QRRTYPE::GPOS.code()),
            QRRTYPE::AAAA => format!("{:02x}", QRRTYPE::AAAA.code()),
            QRRTYPE::LOC => format!("{:02x}", QRRTYPE::LOC.code()),
            QRRTYPE::NXT => format!("{:02x}", QRRTYPE::NXT.code()),
            QRRTYPE::EID => format!("{:02x}", QRRTYPE::EID.code()),
            QRRTYPE::NIMLOC => format!("{:02x}", QRRTYPE::NIMLOC.code()),
            QRRTYPE::SRV => format!("{:02x}", QRRTYPE::SRV.code()),
            QRRTYPE::ATMA => format!("{:02x}", QRRTYPE::ATMA.code()),
            QRRTYPE::NAPTR => format!("{:02x}", QRRTYPE::NAPTR.code()),
            QRRTYPE::KX => format!("{:02x}", QRRTYPE::KX.code()),
            QRRTYPE::CERT => format!("{:02x}", QRRTYPE::CERT.code()),
            QRRTYPE::A6 => format!("{:02x}", QRRTYPE::A6.code()),
            QRRTYPE::DNAME => format!("{:02x}", QRRTYPE::DNAME.code()),
            QRRTYPE::SINK => format!("{:02x}", QRRTYPE::SINK.code()),
            QRRTYPE::OPT => format!("{:02x}", QRRTYPE::OPT.code()),
            QRRTYPE::APL => format!("{:02x}", QRRTYPE::APL.code()),
            QRRTYPE::DS => format!("{:02x}", QRRTYPE::DS.code()),
            QRRTYPE::SSHFP => format!("{:02x}", QRRTYPE::SSHFP.code()),
            QRRTYPE::IPSECKEY => format!("{:02x}", QRRTYPE::IPSECKEY.code()),
            QRRTYPE::RRSIG => format!("{:02x}", QRRTYPE::RRSIG.code()),
            QRRTYPE::NSEC => format!("{:02x}", QRRTYPE::NSEC.code()),
            QRRTYPE::DNSKEY => format!("{:02x}", QRRTYPE::DNSKEY.code()),
            QRRTYPE::DHCID => format!("{:02x}", QRRTYPE::DHCID.code()),
            QRRTYPE::NSEC3 => format!("{:02x}", QRRTYPE::NSEC3.code()),
            QRRTYPE::NSEC3PARAM => format!("{:02x}", QRRTYPE::NSEC3PARAM.code()),
            QRRTYPE::TLSA => format!("{:02x}", QRRTYPE::TLSA.code()),
            QRRTYPE::SMIMEA => format!("{:02x}", QRRTYPE::SMIMEA.code()),
            QRRTYPE::HIP => format!("{:02x}", QRRTYPE::HIP.code()),
            QRRTYPE::NINFO => format!("{:02x}", QRRTYPE::MINFO.code()),
            QRRTYPE::RKEY => format!("{:02x}", QRRTYPE::RKEY.code()),
            QRRTYPE::TALINK => format!("{:02x}", QRRTYPE::TALINK.code()),
            QRRTYPE::CDS => format!("{:02x}", QRRTYPE::CDS.code()),
            QRRTYPE::CDNSKEY => format!("{:02x}", QRRTYPE::CDNSKEY.code()),
            QRRTYPE::OPENPGPKEY => format!("{:02x}", QRRTYPE::OPENPGPKEY.code()),
            QRRTYPE::CSYNC => format!("{:02x}", QRRTYPE::CSYNC.code()),
            QRRTYPE::ZONEMD => format!("{:02x}", QRRTYPE::ZONEMD.code()),
            QRRTYPE::SVCB => format!("{:02x}", QRRTYPE::SVCB.code()),
            QRRTYPE::HTTPS => format!("{:02x}", QRRTYPE::HTTPS.code()),
            QRRTYPE::SPF => format!("{:02x}", QRRTYPE::SPF.code()),
            QRRTYPE::UINFO => format!("{:02x}", QRRTYPE::UINFO.code()),
            QRRTYPE::UID => format!("{:02x}", QRRTYPE::UID.code()),
            QRRTYPE::GID => format!("{:02x}", QRRTYPE::GID.code()),
            QRRTYPE::UNSPEC => format!("{:02x}", QRRTYPE::UNSPEC.code()),
            QRRTYPE::NID => format!("{:02x}", QRRTYPE::NID.code()),
            QRRTYPE::L32 => format!("{:02x}", QRRTYPE::L32.code()),
            QRRTYPE::L64 => format!("{:02x}", QRRTYPE::L64.code()),
            QRRTYPE::LP => format!("{:02x}", QRRTYPE::LP.code()),
            QRRTYPE::EUI48 => format!("{:02x}", QRRTYPE::EUI48.code()),
            QRRTYPE::EUI64 => format!("{:02x}", QRRTYPE::EUI64.code()),
            QRRTYPE::TKEY => format!("{:02x}", QRRTYPE::TKEY.code()),
            QRRTYPE::TSIG => format!("{:02x}", QRRTYPE::TSIG.code()),
            QRRTYPE::IXFR => format!("{:02x}", QRRTYPE::IXFR.code()),
            QRRTYPE::AXFR => format!("{:02x}", QRRTYPE::AXFR.code()),
            QRRTYPE::MAILB => format!("{:02x}", QRRTYPE::MAILB.code()),
            QRRTYPE::MAILA => format!("{:02x}", QRRTYPE::MAILA.code()),
            QRRTYPE::ANY => format!("{:02x}", QRRTYPE::ANY.code()),
            QRRTYPE::URI => format!("{:02x}", QRRTYPE::URI.code()),
            QRRTYPE::CAA => format!("{:02x}", QRRTYPE::CAA.code()),
            QRRTYPE::AVC => format!("{:02x}", QRRTYPE::AVC.code()),
            QRRTYPE::DOA => format!("{:02x}", QRRTYPE::DOA.code()),
            QRRTYPE::AMTRELAY => format!("{:02x}", QRRTYPE::AMTRELAY.code()),
            QRRTYPE::TA => format!("{:02x}", QRRTYPE::TA.code()),
            QRRTYPE::DLV => format!("{:02x}", QRRTYPE::DLV.code()),
        }
    }
}
