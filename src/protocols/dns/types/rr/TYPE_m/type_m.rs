/*
 * Copyright 2023 Stanislav Mikhailov (xavetar)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

use super::{TYPE_Details};
use super::{RESERVED, UNASSIGNED, PRIVATE_USE};
use super::{TwoResult, TwoResult::First, TwoResult::Second};

pub enum TYPE {
    A = 1,
    NS = 2,
    MD = 3,
    MF = 4,
    CNAME = 5,
    SOA = 6,
    MB = 7,
    MG = 8,
    MR = 9,
    NULL = 10,
    WKS = 11,
    PTR = 12,
    HINFO = 13,
    MINFO = 14,
    MX = 15,
    TXT = 16,
    RP = 17,
    AFSDB = 18,
    X25 = 19,
    ISDN = 20,
    RT = 21,
    NSAP = 22,
    NSAP_PTR = 23,
    SIG = 24,
    KEY = 25,
    PX = 26,
    GPOS = 27,
    AAAA = 28,
    LOC = 29,
    NXT = 30,
    EID = 31,
    NIMLOC = 32,
    SRV = 33,
    ATMA = 34,
    NAPTR = 35,
    KX = 36,
    CERT = 37,
    A6 = 38,
    DNAME = 39,
    SINK = 40,
    OPT = 41,
    APL = 42,
    DS = 43,
    SSHFP = 44,
    IPSECKEY = 45,
    RRSIG = 46,
    NSEC = 47,
    DNSKEY = 48,
    DHCID = 49,
    NSEC3 = 50,
    NSEC3PARAM = 51,
    TLSA = 52,
    SMIMEA = 53,
    HIP = 55,
    NINFO = 56,
    RKEY = 57,
    TALINK = 58,
    CDS = 59,
    CDNSKEY = 60,
    OPENPGPKEY = 61,
    CSYNC = 62,
    ZONEMD = 63,
    SVCB = 64,
    HTTPS = 65,
    SPF = 99,
    UINFO = 100,
    UID = 101,
    GID = 102,
    UNSPEC = 103,
    NID = 104,
    L32 = 105,
    L64 = 106,
    LP = 107,
    EUI48 = 108,
    EUI64 = 109,
    TKEY = 249,
    TSIG = 250,
    IXFR = 251,
    AXFR = 252,
    MAILB = 253,
    MAILA = 254,
    ANY = 255,
    URI = 256,
    CAA = 257,
    AVC = 258,
    DOA = 259,
    AMTRELAY = 260,
    TA = 32768,
    DLV = 32769,
}

impl TYPE {
    pub fn name(&self) -> &'static str {
        return match self {
            TYPE::A => "A",
            TYPE::NS => "NS",
            TYPE::MD => "MD",
            TYPE::MF => "MF",
            TYPE::CNAME => "CNAME",
            TYPE::SOA => "SOA",
            TYPE::MB => "MB",
            TYPE::MG => "MG",
            TYPE::MR => "MR",
            TYPE::NULL => "NULL",
            TYPE::WKS => "WKS",
            TYPE::PTR => "PTR",
            TYPE::HINFO => "HINFO",
            TYPE::MINFO => "MINFO",
            TYPE::MX => "MX",
            TYPE::TXT => "TXT",
            TYPE::RP => "RP",
            TYPE::AFSDB => "AFSDB",
            TYPE::X25 => "X25",
            TYPE::ISDN => "ISDN",
            TYPE::RT => "RT",
            TYPE::NSAP => "NSAP",
            TYPE::NSAP_PTR => "NSAP-PTR",
            TYPE::SIG => "SIG",
            TYPE::KEY => "KEY",
            TYPE::PX => "PX",
            TYPE::GPOS => "GPOS",
            TYPE::AAAA => "AAAA",
            TYPE::LOC => "LOC",
            TYPE::NXT => "NXT",
            TYPE::EID => "EID",
            TYPE::NIMLOC => "NIMLOC",
            TYPE::SRV => "SRV",
            TYPE::ATMA => "ATMA",
            TYPE::NAPTR => "NAPTR",
            TYPE::KX => "KX",
            TYPE::CERT => "CERT",
            TYPE::A6 => "A6",
            TYPE::DNAME => "DNAME",
            TYPE::SINK => "SINK",
            TYPE::OPT => "OPT",
            TYPE::APL => "APL",
            TYPE::DS => "DS",
            TYPE::SSHFP => "SSHFP",
            TYPE::IPSECKEY => "IPSECKEY",
            TYPE::RRSIG => "RRSIG",
            TYPE::NSEC => "NSEC",
            TYPE::DNSKEY => "DNSKEY",
            TYPE::DHCID => "DHCID",
            TYPE::NSEC3 => "NSEC3",
            TYPE::NSEC3PARAM => "NSEC3PARAM",
            TYPE::TLSA => "TLSA",
            TYPE::SMIMEA => "SMIMEA",
            TYPE::HIP => "HIP",
            TYPE::NINFO => "NINFO",
            TYPE::RKEY => "RKEY",
            TYPE::TALINK => "TALINK",
            TYPE::CDS => "CDS",
            TYPE::CDNSKEY => "CDNSKEY",
            TYPE::OPENPGPKEY => "OPENPGPKEY",
            TYPE::CSYNC => "CSYNC",
            TYPE::ZONEMD => "ZONEMD",
            TYPE::SVCB => "SVCB",
            TYPE::HTTPS => "HTTPS",
            TYPE::SPF => "SPF",
            TYPE::UINFO => "UINFO",
            TYPE::UID => "UID",
            TYPE::GID => "GID",
            TYPE::UNSPEC => "UNSPEC",
            TYPE::NID => "NID",
            TYPE::L32 => "L32",
            TYPE::L64 => "L64",
            TYPE::LP => "LP",
            TYPE::EUI48 => "EUI48",
            TYPE::EUI64 => "EUI64",
            TYPE::TKEY => "TKEY",
            TYPE::TSIG => "TSIG",
            TYPE::IXFR => "IXFR",
            TYPE::AXFR => "AXFR",
            TYPE::MAILB => "MAILB",
            TYPE::MAILA => "MAILA",
            TYPE::ANY => "*",
            TYPE::URI => "URI",
            TYPE::CAA => "CAA",
            TYPE::AVC => "AVC",
            TYPE::DOA => "DOA",
            TYPE::AMTRELAY => "AMTRELAY",
            TYPE::TA => "TA",
            TYPE::DLV => "DLV"
        }
    }

    pub fn code(&self) -> u16 {
        return match self {
            TYPE::A => TYPE::A as u16,
            TYPE::NS => TYPE::NS as u16,
            TYPE::MD => TYPE::MD as u16,
            TYPE::MF => TYPE::MF as u16,
            TYPE::CNAME => TYPE::CNAME as u16,
            TYPE::SOA => TYPE::SOA as u16,
            TYPE::MB => TYPE::MB as u16,
            TYPE::MG => TYPE::MG as u16,
            TYPE::MR => TYPE::MR as u16,
            TYPE::NULL => TYPE::NULL as u16,
            TYPE::WKS => TYPE::WKS as u16,
            TYPE::PTR => TYPE::PTR as u16,
            TYPE::HINFO => TYPE::HINFO as u16,
            TYPE::MINFO => TYPE::MINFO as u16,
            TYPE::MX => TYPE::MX as u16,
            TYPE::TXT => TYPE::TXT as u16,
            TYPE::RP => TYPE::RP as u16,
            TYPE::AFSDB => TYPE::AFSDB as u16,
            TYPE::X25 => TYPE::X25 as u16,
            TYPE::ISDN => TYPE::ISDN as u16,
            TYPE::RT => TYPE::RT as u16,
            TYPE::NSAP => TYPE::NSAP as u16,
            TYPE::NSAP_PTR => TYPE::NSAP_PTR as u16,
            TYPE::SIG => TYPE::SIG as u16,
            TYPE::KEY => TYPE::KEY as u16,
            TYPE::PX => TYPE::PX as u16,
            TYPE::GPOS => TYPE::GPOS as u16,
            TYPE::AAAA => TYPE::AAAA as u16,
            TYPE::LOC => TYPE::LOC as u16,
            TYPE::NXT => TYPE::NXT as u16,
            TYPE::EID => TYPE::EID as u16,
            TYPE::NIMLOC => TYPE::NIMLOC as u16,
            TYPE::SRV => TYPE::SRV as u16,
            TYPE::ATMA => TYPE::ATMA as u16,
            TYPE::NAPTR => TYPE::NAPTR as u16,
            TYPE::KX => TYPE::KX as u16,
            TYPE::CERT => TYPE::CERT as u16,
            TYPE::A6 => TYPE::A6 as u16,
            TYPE::DNAME => TYPE::DNAME as u16,
            TYPE::SINK => TYPE::SINK as u16,
            TYPE::OPT => TYPE::OPT as u16,
            TYPE::APL => TYPE::APL as u16,
            TYPE::DS => TYPE::DS as u16,
            TYPE::SSHFP => TYPE::SSHFP as u16,
            TYPE::IPSECKEY => TYPE::IPSECKEY as u16,
            TYPE::RRSIG => TYPE::RRSIG as u16,
            TYPE::NSEC => TYPE::NSEC as u16,
            TYPE::DNSKEY => TYPE::DNSKEY as u16,
            TYPE::DHCID => TYPE::DHCID as u16,
            TYPE::NSEC3 => TYPE::NSEC3 as u16,
            TYPE::NSEC3PARAM => TYPE::NSEC3PARAM as u16,
            TYPE::TLSA => TYPE::TLSA as u16,
            TYPE::SMIMEA => TYPE::SMIMEA as u16,
            TYPE::HIP => TYPE::HIP as u16,
            TYPE::NINFO => TYPE::NINFO as u16,
            TYPE::RKEY => TYPE::RKEY as u16,
            TYPE::TALINK => TYPE::TALINK as u16,
            TYPE::CDS => TYPE::CDS as u16,
            TYPE::CDNSKEY => TYPE::CDNSKEY as u16,
            TYPE::OPENPGPKEY => TYPE::OPENPGPKEY as u16,
            TYPE::CSYNC => TYPE::CSYNC as u16,
            TYPE::ZONEMD => TYPE::ZONEMD as u16,
            TYPE::SVCB => TYPE::SVCB as u16,
            TYPE::HTTPS => TYPE::HTTPS as u16,
            TYPE::SPF => TYPE::SPF as u16,
            TYPE::UINFO => TYPE::UINFO as u16,
            TYPE::UID => TYPE::UID as u16,
            TYPE::GID => TYPE::GID as u16,
            TYPE::UNSPEC => TYPE::UNSPEC as u16,
            TYPE::NID => TYPE::NID as u16,
            TYPE::L32 => TYPE::L32 as u16,
            TYPE::L64 => TYPE::L64 as u16,
            TYPE::LP => TYPE::LP as u16,
            TYPE::EUI48 => TYPE::EUI48 as u16,
            TYPE::EUI64 => TYPE::EUI64 as u16,
            TYPE::TKEY => TYPE::TKEY as u16,
            TYPE::TSIG => TYPE::TSIG as u16,
            TYPE::IXFR => TYPE::IXFR as u16,
            TYPE::AXFR => TYPE::AXFR as u16,
            TYPE::MAILB => TYPE::MAILB as u16,
            TYPE::MAILA => TYPE::MAILA as u16,
            TYPE::ANY => TYPE::ANY as u16,
            TYPE::URI => TYPE::URI as u16,
            TYPE::CAA => TYPE::CAA as u16,
            TYPE::AVC => TYPE::AVC as u16,
            TYPE::DOA => TYPE::DOA as u16,
            TYPE::AMTRELAY => TYPE::AMTRELAY as u16,
            TYPE::TA => TYPE::TA as u16,
            TYPE::DLV => TYPE::DLV as u16,
        }
    }

    pub fn encode(t: &str) -> TYPE {
        return match t {
            "A" => TYPE::A,
            "NS" => TYPE::NS,
            "MD" => TYPE::MD,
            "MF" => TYPE::MF,
            "CNAME" => TYPE::CNAME,
            "SOA" => TYPE::SOA,
            "MB" => TYPE::MB,
            "MG" => TYPE::MG,
            "MR" => TYPE::MR,
            "NULL" => TYPE::NULL,
            "WKS" => TYPE::WKS,
            "PTR" => TYPE::PTR,
            "HINFO" => TYPE::HINFO,
            "MINFO" => TYPE::MINFO,
            "MX" => TYPE::MX,
            "TXT" => TYPE::TXT,
            "RP" => TYPE::RP,
            "AFSDB" => TYPE::AFSDB,
            "X25" => TYPE::X25,
            "ISDN" => TYPE::ISDN,
            "RT" => TYPE::RT,
            "NSAP" => TYPE::NSAP,
            "NSAP-PTR" => TYPE::NSAP_PTR,
            "SIG" => TYPE::SIG,
            "KEY" => TYPE::KEY,
            "PX" => TYPE::PX,
            "GPOS" => TYPE::GPOS,
            "AAAA" => TYPE::AAAA,
            "LOC" => TYPE::LOC,
            "NXT" => TYPE::NXT,
            "EID" => TYPE::EID,
            "NIMLOC" => TYPE::NIMLOC,
            "SRV" => TYPE::SRV,
            "ATMA" => TYPE::ATMA,
            "NAPTR" => TYPE::NAPTR,
            "KX" => TYPE::KX,
            "CERT" => TYPE::CERT,
            "A6" => TYPE::A6,
            "DNAME" => TYPE::DNAME,
            "SINK" => TYPE::SINK,
            "OPT" => TYPE::OPT,
            "APL" => TYPE::APL,
            "DS" => TYPE::DS,
            "SSHFP" => TYPE::SSHFP,
            "IPSECKEY" => TYPE::IPSECKEY,
            "RRSIG" => TYPE::RRSIG,
            "NSEC" => TYPE::NSEC,
            "DNSKEY" => TYPE::DNSKEY,
            "DHCID" => TYPE::DHCID,
            "NSEC3" => TYPE::NSEC3,
            "NSEC3PARAM" => TYPE::NSEC3PARAM,
            "TLSA" => TYPE::TLSA,
            "SMIMEA" => TYPE::SMIMEA,
            "HIP" => TYPE::HIP,
            "NINFO" => TYPE::NINFO,
            "RKEY" => TYPE::RKEY,
            "TALINK" => TYPE::TALINK,
            "CDS" => TYPE::CDS,
            "CDNSKEY" => TYPE::CDNSKEY,
            "OPENPGPKEY" => TYPE::OPENPGPKEY,
            "CSYNC" => TYPE::CSYNC,
            "ZONEMD" => TYPE::ZONEMD,
            "SVCB" => TYPE::SVCB,
            "HTTPS" => TYPE::HTTPS,
            "SPF" => TYPE::SPF,
            "UINFO" => TYPE::UINFO,
            "UID" => TYPE::UID,
            "GID" => TYPE::GID,
            "UNSPEC" => TYPE::UNSPEC,
            "NID" => TYPE::NID,
            "L32" => TYPE::L32,
            "L64" => TYPE::L64,
            "LP" => TYPE::LP,
            "EUI48" => TYPE::EUI48,
            "EUI64" => TYPE::EUI64,
            "TKEY" => TYPE::TKEY,
            "TSIG" => TYPE::TSIG,
            "IXFR" => TYPE::IXFR,
            "AXFR" => TYPE::AXFR,
            "MAILB" => TYPE::MAILB,
            "MAILA" => TYPE::MAILA,
            "*" => TYPE::ANY,
            "URI" => TYPE::URI,
            "CAA" => TYPE::CAA,
            "AVC" => TYPE::AVC,
            "DOA" => TYPE::DOA,
            "AMTRELAY" => TYPE::AMTRELAY,
            "TA" => TYPE::TA,
            "DLV" => TYPE::DLV,
            _ => panic!("Can't encode TYPE!")
        }
    }

    pub fn decode(t: &u16) -> TwoResult<TYPE, TYPE_Details> {
        return match *t {
            0 => Second(TYPE_Details::new(RESERVED, *t)),
            1 => First(TYPE::A),
            2 => First(TYPE::NS),
            3 => First(TYPE::MD),
            4 => First(TYPE::MF),
            5 => First(TYPE::CNAME),
            6 => First(TYPE::SOA),
            7 => First(TYPE::MB),
            8 => First(TYPE::MG),
            9 => First(TYPE::MR),
            10 => First(TYPE::NULL),
            11 => First(TYPE::WKS),
            12 => First(TYPE::PTR),
            13 => First(TYPE::HINFO),
            14 => First(TYPE::MINFO),
            15 => First(TYPE::MX),
            16 => First(TYPE::TXT),
            17 => First(TYPE::RP),
            18 => First(TYPE::AFSDB),
            19 => First(TYPE::X25),
            20 => First(TYPE::ISDN),
            21 => First(TYPE::RT),
            22 => First(TYPE::NSAP),
            23 => First(TYPE::NSAP_PTR),
            24 => First(TYPE::SIG),
            25 => First(TYPE::KEY),
            26 => First(TYPE::PX),
            27 => First(TYPE::GPOS),
            28 => First(TYPE::AAAA),
            29 => First(TYPE::LOC),
            30 => First(TYPE::NXT),
            31 => First(TYPE::EID),
            32 => First(TYPE::NIMLOC),
            33 => First(TYPE::SRV),
            34 => First(TYPE::ATMA),
            35 => First(TYPE::NAPTR),
            36 => First(TYPE::KX),
            37 => First(TYPE::CERT),
            38 => First(TYPE::A6),
            39 => First(TYPE::DNAME),
            40 => First(TYPE::SINK),
            41 => First(TYPE::OPT),
            42 => First(TYPE::APL),
            43 => First(TYPE::DS),
            44 => First(TYPE::SSHFP),
            45 => First(TYPE::IPSECKEY),
            46 => First(TYPE::RRSIG),
            47 => First(TYPE::NSEC),
            48 => First(TYPE::DNSKEY),
            49 => First(TYPE::DHCID),
            50 => First(TYPE::NSEC3),
            51 => First(TYPE::NSEC3PARAM),
            52 => First(TYPE::TLSA),
            53 => First(TYPE::SMIMEA),
            54 => Second(TYPE_Details::new(UNASSIGNED, *t)),
            55 => First(TYPE::HIP),
            56 => First(TYPE::NINFO),
            57 => First(TYPE::RKEY),
            58 => First(TYPE::TALINK),
            59 => First(TYPE::CDS),
            60 => First(TYPE::CDNSKEY),
            61 => First(TYPE::OPENPGPKEY),
            62 => First(TYPE::CSYNC),
            63 => First(TYPE::ZONEMD),
            64 => First(TYPE::SVCB),
            65 => First(TYPE::HTTPS),
            66..=98 => Second(TYPE_Details::new(UNASSIGNED, *t)),
            99 => First(TYPE::SPF),
            100 => First(TYPE::UINFO),
            101 => First(TYPE::UID),
            102 => First(TYPE::GID),
            103 => First(TYPE::UNSPEC),
            104 => First(TYPE::NID),
            105 => First(TYPE::L32),
            106 => First(TYPE::L64),
            107 => First(TYPE::LP),
            108 => First(TYPE::EUI48),
            109 => First(TYPE::EUI64),
            110..=248 => Second(TYPE_Details::new(UNASSIGNED, *t)),
            249 => First(TYPE::TKEY),
            250 => First(TYPE::TSIG),
            251 => First(TYPE::IXFR),
            252 => First(TYPE::AXFR),
            253 => First(TYPE::MAILB),
            254 => First(TYPE::MAILA),
            255 => First(TYPE::ANY),
            256 => First(TYPE::URI),
            257 => First(TYPE::CAA),
            258 => First(TYPE::AVC),
            259 => First(TYPE::DOA),
            260 => First(TYPE::AMTRELAY),
            261..=32767 => Second(TYPE_Details::new(UNASSIGNED, *t)),
            32768 => First(TYPE::TA),
            32769 => First(TYPE::DLV),
            37770..=65279 => Second(TYPE_Details::new(UNASSIGNED, *t)),
            65280..=65534 => Second(TYPE_Details::new(PRIVATE_USE, *t)),
            65535 => Second(TYPE_Details::new(RESERVED, *t)),
            _ => panic!("Can't decode TYPE!")
        }
    }
}
