/*
 * Copyright 2023 Stanislav Mikhailov (xavetar)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

pub enum TYPE {
    A = 1,
    NS = 2,
    MD = 3,
    MF = 4,
    CNAME = 5,
    SOA = 6,
    MB = 7,
    MG = 8,
    MR = 9,
    NULL = 10,
    WKS = 11,
    PTR = 12,
    HINFO = 13,
    MINFO = 14,
    MX = 15,
    TXT = 16,
    RP = 17,
    AFSDB = 18,
    X25 = 19,
    ISDN = 20,
    RT = 21,
    NSAP = 22,
    NSAP_PTR = 23,
    SIG = 24,
    KEY = 25,
    PX = 26,
    GPOS = 27,
    AAAA = 28,
    LOC = 29,
    NXT = 30,
    EID = 31,
    NIMLOC = 32,
    SRV = 33,
    ATMA = 34,
    NAPTR = 35,
    KX = 36,
    CERT = 37,
    A6 = 38,
    DNAME = 39,
    SINK = 40,
    OPT = 41,
    APL = 42,
    DS = 43,
    SSHFP = 44,
    IPSECKEY = 45,
    RRSIG = 46,
    NSEC = 47,
    DNSKEY = 48,
    DHCID = 49,
    NSEC3 = 50,
    NSEC3PARAM = 51,
    TLSA = 52,
    SMIMEA = 53,
    HIP = 55,
    NINFO = 56,
    RKEY = 57,
    TALINK = 58,
    CDS = 59,
    CDNSKEY = 60,
    OPENPGPKEY = 61,
    CSYNC = 62,
    ZONEMD = 63,
    SVCB = 64,
    HTTPS = 65,
    SPF = 99,
    UINFO = 100,
    UID = 101,
    GID = 102,
    UNSPEC = 103,
    NID = 104,
    L32 = 105,
    L64 = 106,
    LP = 107,
    EUI48 = 108,
    EUI64 = 109,
    TKEY = 249,
    TSIG = 250,
    IXFR = 251,
    AXFR = 252,
    MAILB = 253,
    MAILA = 254,
    ANY = 255,
    URI = 256,
    CAA = 257,
    AVC = 258,
    DOA = 259,
    AMTRELAY = 260,
    TA = 32768,
    DLV = 32769,
}

impl TYPE {
    pub fn name(&self) -> &'static str {
        return match self {
            TYPE::A => "A",
            TYPE::NS => "NS",
            TYPE::MD => "MD",
            TYPE::MF => "MF",
            TYPE::CNAME => "CNAME",
            TYPE::SOA => "SOA",
            TYPE::MB => "MB",
            TYPE::MG => "MG",
            TYPE::MR => "MR",
            TYPE::NULL => "NULL",
            TYPE::WKS => "WKS",
            TYPE::PTR => "PTR",
            TYPE::HINFO => "HINFO",
            TYPE::MINFO => "MINFO",
            TYPE::MX => "MX",
            TYPE::TXT => "TXT",
            TYPE::RP => "RP",
            TYPE::AFSDB => "AFSDB",
            TYPE::X25 => "X25",
            TYPE::ISDN => "ISDN",
            TYPE::RT => "RT",
            TYPE::NSAP => "NSAP",
            TYPE::NSAP_PTR => "NSAP-PTR",
            TYPE::SIG => "SIG",
            TYPE::KEY => "KEY",
            TYPE::PX => "PX",
            TYPE::GPOS => "GPOS",
            TYPE::AAAA => "AAAA",
            TYPE::LOC => "LOC",
            TYPE::NXT => "NXT",
            TYPE::EID => "EID",
            TYPE::NIMLOC => "NIMLOC",
            TYPE::SRV => "SRV",
            TYPE::ATMA => "ATMA",
            TYPE::NAPTR => "NAPTR",
            TYPE::KX => "KX",
            TYPE::CERT => "CERT",
            TYPE::A6 => "A6",
            TYPE::DNAME => "DNAME",
            TYPE::SINK => "SINK",
            TYPE::OPT => "OPT",
            TYPE::APL => "APL",
            TYPE::DS => "DS",
            TYPE::SSHFP => "SSHFP",
            TYPE::IPSECKEY => "IPSECKEY",
            TYPE::RRSIG => "RRSIG",
            TYPE::NSEC => "NSEC",
            TYPE::DNSKEY => "DNSKEY",
            TYPE::DHCID => "DHCID",
            TYPE::NSEC3 => "NSEC3",
            TYPE::NSEC3PARAM => "NSEC3PARAM",
            TYPE::TLSA => "TLSA",
            TYPE::SMIMEA => "SMIMEA",
            TYPE::HIP => "HIP",
            TYPE::NINFO => "NINFO",
            TYPE::RKEY => "RKEY",
            TYPE::TALINK => "TALINK",
            TYPE::CDS => "CDS",
            TYPE::CDNSKEY => "CDNSKEY",
            TYPE::OPENPGPKEY => "OPENPGPKEY",
            TYPE::CSYNC => "CSYNC",
            TYPE::ZONEMD => "ZONEMD",
            TYPE::SVCB => "SVCB",
            TYPE::HTTPS => "HTTPS",
            TYPE::SPF => "SPF",
            TYPE::UINFO => "UINFO",
            TYPE::UID => "UID",
            TYPE::GID => "GID",
            TYPE::UNSPEC => "UNSPEC",
            TYPE::NID => "NID",
            TYPE::L32 => "L32",
            TYPE::L64 => "L64",
            TYPE::LP => "LP",
            TYPE::EUI48 => "EUI48",
            TYPE::EUI64 => "EUI64",
            TYPE::TKEY => "TKEY",
            TYPE::TSIG => "TSIG",
            TYPE::IXFR => "IXFR",
            TYPE::AXFR => "AXFR",
            TYPE::MAILB => "MAILB",
            TYPE::MAILA => "MAILA",
            TYPE::ANY => "*",
            TYPE::URI => "URI",
            TYPE::CAA => "CAA",
            TYPE::AVC => "AVC",
            TYPE::DOA => "DOA",
            TYPE::AMTRELAY => "AMTRELAY",
            TYPE::TA => "TA",
            TYPE::DLV => "DLV"
        }
    }

    pub fn code(&self) -> u16 {
        return match self {
            TYPE::A => TYPE::A as u16,
            TYPE::NS => TYPE::NS as u16,
            TYPE::MD => TYPE::MD as u16,
            TYPE::MF => TYPE::MF as u16,
            TYPE::CNAME => TYPE::CNAME as u16,
            TYPE::SOA => TYPE::SOA as u16,
            TYPE::MB => TYPE::MB as u16,
            TYPE::MG => TYPE::MG as u16,
            TYPE::MR => TYPE::MR as u16,
            TYPE::NULL => TYPE::NULL as u16,
            TYPE::WKS => TYPE::WKS as u16,
            TYPE::PTR => TYPE::PTR as u16,
            TYPE::HINFO => TYPE::HINFO as u16,
            TYPE::MINFO => TYPE::MINFO as u16,
            TYPE::MX => TYPE::MX as u16,
            TYPE::TXT => TYPE::TXT as u16,
            TYPE::RP => TYPE::RP as u16,
            TYPE::AFSDB => TYPE::AFSDB as u16,
            TYPE::X25 => TYPE::X25 as u16,
            TYPE::ISDN => TYPE::ISDN as u16,
            TYPE::RT => TYPE::RT as u16,
            TYPE::NSAP => TYPE::NSAP as u16,
            TYPE::NSAP_PTR => TYPE::NSAP_PTR as u16,
            TYPE::SIG => TYPE::SIG as u16,
            TYPE::KEY => TYPE::KEY as u16,
            TYPE::PX => TYPE::PX as u16,
            TYPE::GPOS => TYPE::GPOS as u16,
            TYPE::AAAA => TYPE::AAAA as u16,
            TYPE::LOC => TYPE::LOC as u16,
            TYPE::NXT => TYPE::NXT as u16,
            TYPE::EID => TYPE::EID as u16,
            TYPE::NIMLOC => TYPE::NIMLOC as u16,
            TYPE::SRV => TYPE::SRV as u16,
            TYPE::ATMA => TYPE::ATMA as u16,
            TYPE::NAPTR => TYPE::NAPTR as u16,
            TYPE::KX => TYPE::KX as u16,
            TYPE::CERT => TYPE::CERT as u16,
            TYPE::A6 => TYPE::A6 as u16,
            TYPE::DNAME => TYPE::DNAME as u16,
            TYPE::SINK => TYPE::SINK as u16,
            TYPE::OPT => TYPE::OPT as u16,
            TYPE::APL => TYPE::APL as u16,
            TYPE::DS => TYPE::DS as u16,
            TYPE::SSHFP => TYPE::SSHFP as u16,
            TYPE::IPSECKEY => TYPE::IPSECKEY as u16,
            TYPE::RRSIG => TYPE::RRSIG as u16,
            TYPE::NSEC => TYPE::NSEC as u16,
            TYPE::DNSKEY => TYPE::DNSKEY as u16,
            TYPE::DHCID => TYPE::DHCID as u16,
            TYPE::NSEC3 => TYPE::NSEC3 as u16,
            TYPE::NSEC3PARAM => TYPE::NSEC3PARAM as u16,
            TYPE::TLSA => TYPE::TLSA as u16,
            TYPE::SMIMEA => TYPE::SMIMEA as u16,
            TYPE::HIP => TYPE::HIP as u16,
            TYPE::NINFO => TYPE::NINFO as u16,
            TYPE::RKEY => TYPE::RKEY as u16,
            TYPE::TALINK => TYPE::TALINK as u16,
            TYPE::CDS => TYPE::CDS as u16,
            TYPE::CDNSKEY => TYPE::CDNSKEY as u16,
            TYPE::OPENPGPKEY => TYPE::OPENPGPKEY as u16,
            TYPE::CSYNC => TYPE::CSYNC as u16,
            TYPE::ZONEMD => TYPE::ZONEMD as u16,
            TYPE::SVCB => TYPE::SVCB as u16,
            TYPE::HTTPS => TYPE::HTTPS as u16,
            TYPE::SPF => TYPE::SPF as u16,
            TYPE::UINFO => TYPE::UINFO as u16,
            TYPE::UID => TYPE::UID as u16,
            TYPE::GID => TYPE::GID as u16,
            TYPE::UNSPEC => TYPE::UNSPEC as u16,
            TYPE::NID => TYPE::NID as u16,
            TYPE::L32 => TYPE::L32 as u16,
            TYPE::L64 => TYPE::L64 as u16,
            TYPE::LP => TYPE::LP as u16,
            TYPE::EUI48 => TYPE::EUI48 as u16,
            TYPE::EUI64 => TYPE::EUI64 as u16,
            TYPE::TKEY => TYPE::TKEY as u16,
            TYPE::TSIG => TYPE::TSIG as u16,
            TYPE::IXFR => TYPE::IXFR as u16,
            TYPE::AXFR => TYPE::AXFR as u16,
            TYPE::MAILB => TYPE::MAILB as u16,
            TYPE::MAILA => TYPE::MAILA as u16,
            TYPE::ANY => TYPE::ANY as u16,
            TYPE::URI => TYPE::URI as u16,
            TYPE::CAA => TYPE::CAA as u16,
            TYPE::AVC => TYPE::AVC as u16,
            TYPE::DOA => TYPE::DOA as u16,
            TYPE::AMTRELAY => TYPE::AMTRELAY as u16,
            TYPE::TA => TYPE::TA as u16,
            TYPE::DLV => TYPE::DLV as u16,
        }
    }

    pub fn hex(&self) -> String {
        return match self {
            TYPE::A => format!("{:02x}", TYPE::A.code()),
            TYPE::NS => format!("{:02x}", TYPE::NS.code()),
            TYPE::MD => format!("{:02x}", TYPE::MD.code()),
            TYPE::MF => format!("{:02x}", TYPE::MF.code()),
            TYPE::CNAME => format!("{:02x}", TYPE::CNAME.code()),
            TYPE::SOA => format!("{:02x}", TYPE::SOA.code()),
            TYPE::MB => format!("{:02x}", TYPE::MB.code()),
            TYPE::MG => format!("{:02x}", TYPE::MG.code()),
            TYPE::MR => format!("{:02x}", TYPE::MR.code()),
            TYPE::NULL => format!("{:02x}", TYPE::NULL.code()),
            TYPE::WKS => format!("{:02x}", TYPE::WKS.code()),
            TYPE::PTR => format!("{:02x}", TYPE::PTR.code()),
            TYPE::HINFO => format!("{:02x}", TYPE::HINFO.code()),
            TYPE::MINFO => format!("{:02x}", TYPE::MINFO.code()),
            TYPE::MX => format!("{:02x}", TYPE::MX.code()),
            TYPE::TXT => format!("{:02x}", TYPE::TXT.code()),
            TYPE::RP => format!("{:02x}", TYPE::RP.code()),
            TYPE::AFSDB => format!("{:02x}", TYPE::AFSDB.code()),
            TYPE::X25 => format!("{:02x}", TYPE::X25.code()),
            TYPE::ISDN => format!("{:02x}", TYPE::ISDN.code()),
            TYPE::RT => format!("{:02x}", TYPE::RT.code()),
            TYPE::NSAP => format!("{:02x}", TYPE::NSAP.code()),
            TYPE::NSAP_PTR => format!("{:02x}", TYPE::NSAP_PTR.code()),
            TYPE::SIG => format!("{:02x}", TYPE::SIG.code()),
            TYPE::KEY => format!("{:02x}", TYPE::KEY.code()),
            TYPE::PX => format!("{:02x}", TYPE::PX.code()),
            TYPE::GPOS => format!("{:02x}", TYPE::GPOS.code()),
            TYPE::AAAA => format!("{:02x}", TYPE::AAAA.code()),
            TYPE::LOC => format!("{:02x}", TYPE::LOC.code()),
            TYPE::NXT => format!("{:02x}", TYPE::NXT.code()),
            TYPE::EID => format!("{:02x}", TYPE::EID.code()),
            TYPE::NIMLOC => format!("{:02x}", TYPE::NIMLOC.code()),
            TYPE::SRV => format!("{:02x}", TYPE::SRV.code()),
            TYPE::ATMA => format!("{:02x}", TYPE::ATMA.code()),
            TYPE::NAPTR => format!("{:02x}", TYPE::NAPTR.code()),
            TYPE::KX => format!("{:02x}", TYPE::KX.code()),
            TYPE::CERT => format!("{:02x}", TYPE::CERT.code()),
            TYPE::A6 => format!("{:02x}", TYPE::A6.code()),
            TYPE::DNAME => format!("{:02x}", TYPE::DNAME.code()),
            TYPE::SINK => format!("{:02x}", TYPE::SINK.code()),
            TYPE::OPT => format!("{:02x}", TYPE::OPT.code()),
            TYPE::APL => format!("{:02x}", TYPE::APL.code()),
            TYPE::DS => format!("{:02x}", TYPE::DS.code()),
            TYPE::SSHFP => format!("{:02x}", TYPE::SSHFP.code()),
            TYPE::IPSECKEY => format!("{:02x}", TYPE::IPSECKEY.code()),
            TYPE::RRSIG => format!("{:02x}", TYPE::RRSIG.code()),
            TYPE::NSEC => format!("{:02x}", TYPE::NSEC.code()),
            TYPE::DNSKEY => format!("{:02x}", TYPE::DNSKEY.code()),
            TYPE::DHCID => format!("{:02x}", TYPE::DHCID.code()),
            TYPE::NSEC3 => format!("{:02x}", TYPE::NSEC3.code()),
            TYPE::NSEC3PARAM => format!("{:02x}", TYPE::NSEC3PARAM.code()),
            TYPE::TLSA => format!("{:02x}", TYPE::TLSA.code()),
            TYPE::SMIMEA => format!("{:02x}", TYPE::SMIMEA.code()),
            TYPE::HIP => format!("{:02x}", TYPE::HIP.code()),
            TYPE::NINFO => format!("{:02x}", TYPE::MINFO.code()),
            TYPE::RKEY => format!("{:02x}", TYPE::RKEY.code()),
            TYPE::TALINK => format!("{:02x}", TYPE::TALINK.code()),
            TYPE::CDS => format!("{:02x}", TYPE::CDS.code()),
            TYPE::CDNSKEY => format!("{:02x}", TYPE::CDNSKEY.code()),
            TYPE::OPENPGPKEY => format!("{:02x}", TYPE::OPENPGPKEY.code()),
            TYPE::CSYNC => format!("{:02x}", TYPE::CSYNC.code()),
            TYPE::ZONEMD => format!("{:02x}", TYPE::ZONEMD.code()),
            TYPE::SVCB => format!("{:02x}", TYPE::SVCB.code()),
            TYPE::HTTPS => format!("{:02x}", TYPE::HTTPS.code()),
            TYPE::SPF => format!("{:02x}", TYPE::SPF.code()),
            TYPE::UINFO => format!("{:02x}", TYPE::UINFO.code()),
            TYPE::UID => format!("{:02x}", TYPE::UID.code()),
            TYPE::GID => format!("{:02x}", TYPE::GID.code()),
            TYPE::UNSPEC => format!("{:02x}", TYPE::UNSPEC.code()),
            TYPE::NID => format!("{:02x}", TYPE::NID.code()),
            TYPE::L32 => format!("{:02x}", TYPE::L32.code()),
            TYPE::L64 => format!("{:02x}", TYPE::L64.code()),
            TYPE::LP => format!("{:02x}", TYPE::LP.code()),
            TYPE::EUI48 => format!("{:02x}", TYPE::EUI48.code()),
            TYPE::EUI64 => format!("{:02x}", TYPE::EUI64.code()),
            TYPE::TKEY => format!("{:02x}", TYPE::TKEY.code()),
            TYPE::TSIG => format!("{:02x}", TYPE::TSIG.code()),
            TYPE::IXFR => format!("{:02x}", TYPE::IXFR.code()),
            TYPE::AXFR => format!("{:02x}", TYPE::AXFR.code()),
            TYPE::MAILB => format!("{:02x}", TYPE::MAILB.code()),
            TYPE::MAILA => format!("{:02x}", TYPE::MAILA.code()),
            TYPE::ANY => format!("{:02x}", TYPE::ANY.code()),
            TYPE::URI => format!("{:02x}", TYPE::URI.code()),
            TYPE::CAA => format!("{:02x}", TYPE::CAA.code()),
            TYPE::AVC => format!("{:02x}", TYPE::AVC.code()),
            TYPE::DOA => format!("{:02x}", TYPE::DOA.code()),
            TYPE::AMTRELAY => format!("{:02x}", TYPE::AMTRELAY.code()),
            TYPE::TA => format!("{:02x}", TYPE::TA.code()),
            TYPE::DLV => format!("{:02x}", TYPE::DLV.code()),
        }
    }
}
